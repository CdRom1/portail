<?php

/**
 * PluginPhotos
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    galleryne
 * @author     leny <leny@appventus.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginPhotos extends BasePhotos implements Uploadable {

    /**
     * @param type $withFile
     * @param type $size
     * @return Return the filesystem path (temp or definitive) from the upload app directory
     */
    public function getFullPath($withFile=false, $size=null) {
        return ($this->getGallery()->isNew() ? $this->getTempPath($withFile, $size) : $this->getPath($withFile, $size));
    }

    /**
     * @param type $withFile
     * @param type $size
     * @return the path from the upload app directory
     */
    public function getPath($withFile=false, $size=null) {
        return "/uploads/gallery/" . $this->getGallery()->getSlug() . "/" .
                ($size ? $size . "/" : "") .
                ($withFile ? $this->getFilename() : "");
    }

    /**
     * @param type $withFile
     * @param type $size
     * @return Return the temporary path from the upload app directory
     */
    public function getTempPath($withFile=false, $size=null) {
        return "/uploads/gallery/temp/" .
                ($size ? $size . "/" : "") .
                ($withFile ? $this->getFilename() : "");
    }


    public function  delete(Doctrine_Connection $conn = null)
    {
        unlink(sfConfig::get("sf_web_dir").$this->getFullPath(true));
        foreach(sfConfig::get("app_gallerynePlugin_thumbnails_sizes") as $size) {
		$file = sfConfig::get("sf_web_dir").$this->getFullPath(true,$size);
        	if(file_exists($file))
		unlink($file);
        
        }
	parent::delete($conn);
    }

    /**
     * @return Return the allowed extensions, used in upload manager to 
     * determinate the correct model for an uploaded file
     */
    public function getAllowedExtensions() {
        return array('jpg', 'png', 'gif', 'jpeg', 'bmp');
    }

    /* Define here the max upload size you want for this kind of media file */

    public function getLimitMax() {
        return 50000000;
    }

    /* You can add here some business rules */

    public function isValid($deep = false, $hooks = true) {
        parent::isValid();
        return true;
    }

    /* You can add here some callback, like convert a file into another type, make thumbnail or anything */

    public function callback() {
        
    }

}
