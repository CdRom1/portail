<?php

/**
 * PluginPhotos
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    galleryne
 * @author     leny <leny@appventus.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginPhotos extends BasePhotos {
    
    /**
     * @param type $withFile
     * @param type $size
     * @return Return the filesystem path (temp or definitive) from the upload app directory
     */
    public function getFullPath($withFile=false, $size=null) {
        return ($this->getGallery()->isNew() ? $this->getTempPath($withFile, $size) : $this->getPath($withFile, $size));
    }

    /**
     * @param type $withFile
     * @param type $size
     * @return the path from the upload app directory
     */
    public function getPath($withFile=false, $size=null) {
        return "/uploads/gallery/" . $this->getGallery()->getSlug() . "/" .
                ($size ? $size . "/" : "") .
                ($withFile ? $this->getFilename() : "");
    }

    /**
     * @param type $withFile
     * @param type $size
     * @return Return the temporary path from the upload app directory
     */
    public function getTempPath($withFile=false, $size=null) {
        return "/uploads/gallery/temp/" .
                ($size ? $size . "/" : "") .
                ($withFile ? $this->getFilename() : "");
    }


    public function  delete(Doctrine_Connection $conn = null)
    {
        try {
            unlink(sfConfig::get("sf_web_dir").$this->getFullPath(true));
            foreach(sfConfig::get("app_gallerynePlugin_thumbnails_sizes") as $size) {
                    $file = sfConfig::get("sf_web_dir").$this->getFullPath(true,$size);
                    if(file_exists($file))
                    unlink($file);
            }
            parent::delete($conn);
        } catch (Exception $exc) {
            echo $exc->getTraceAsString();
        }
    }

    /**
     * @return Return the allowed extensions, used in upload manager to 
     * determinate the correct model for an uploaded file
     */
    public function getAllowedExtensions() {
        return array('jpg', 'png', 'gif', 'jpeg', 'bmp');
    }

    /* Define here the max upload size you want for this kind of media file */

    public function getLimitMax() {
        return 50000000;
    }

    /* You can add here some business rules */

    public function isValid($deep = false, $hooks = true) {
        parent::isValid();
        return true;
    }

    /* You can add here some callback, like convert a file into another type, make thumbnail or anything */

    public function callback() {
        
    }
    
    
    public function create_thumbnails()
    {
        $img = new sfImage(sfConfig::get("sf_web_dir").$this->getFullPath(true), 'image/'.$this->getExtension());
        $w = $img->getWidth();
        $h = $img->getHeight();
        $sizes = sfConfig::get("app_gallerynePlugin_thumbnails_sizes");
        if(in_array(sfConfig::get("app_gallerynePlugin_default_size"),$sizes)) {
            $sizes[] = sfConfig::get("app_gallerynePlugin_default_size");
        }
        arsort($sizes,SORT_DESC);
        foreach($sizes as $size) {
            if(is_numeric($size))
            {
                $x = (int)($w/$h*$size);
                $img->resize($x,$size);
                $img->setQuality(100);
                $dir = sfConfig::get("sf_web_dir").$this->getFullPath(false, $size);
                if (!is_dir($dir)) {
                    mkdir ($dir);
                    chmod($dir,GalleryneUtils::getChmodValue("drwxrwxrwx"));
                }
                $img->saveAs($dir.'/'.$this->getFilename(), 'image/'.$this->getExtension());
                chmod($dir.'/'.$this->getFilename(),GalleryneUtils::getChmodValue("drwxrwxrwx"));
            }
        }
    }
    
    public function purge_thumbnails()
    {
        $img = new sfImage(sfConfig::get("sf_web_dir").$this->getFullPath(true), 'image/'.$this->getExtension());
        $sizes = sfConfig::get("app_gallerynePlugin_thumbnails_sizes");
        if(in_array(sfConfig::get("app_gallerynePlugin_default_size"),$sizes)) {
            $sizes[] = sfConfig::get("app_gallerynePlugin_default_size");
        }
        arsort($sizes,SORT_DESC);
        foreach($sizes as $size) {
            if(is_numeric($size))
            {
                unlink(sfConfig::get("sf_web_dir").$this->getFullPath(true,$size));
            }
        }
    }

    public function getExtension()
    {
        $extension = explode(".",  $this->getFilename());
        $extension = strtolower($extension[count($extension)-1]);
        return $extension = $extension == "jpg" ? "jpeg" : $extension;
    }
    
    
    public function save(Doctrine_Connection $conn = null)
    {

        parent::save($conn);
        if(file_exists(sfConfig::get("sf_web_dir").$this->getFullPath(true)))
        $this->create_thumbnails();
    }

}
